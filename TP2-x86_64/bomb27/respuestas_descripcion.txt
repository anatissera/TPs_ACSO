Ana Paula Tissera - atissera@udesa.edu.ar
Cómo desactivé cada fase de la bomba:

phase_1

Lo primero fue darme cuenta de que esta fase sólo lee un único string y lo compara 
contra un valor fijo usando la función strings_not_equal. Al mirar el ensamblador 
vi que justo antes de llamar a la bomba se hacía:
  lea rsi, [rip+0xc7c62]    ← carga en rsi la dirección del literal
  call strings_not_equal    ← compara rdi (input) con *rsi
  test eax, eax             ← si eax≠0 (cadenas distintas) salta a explode_bomb
Entonces rdi contiene el puntero a la cadena que de input, 
y rsi apunta al texto correcto embebido en el binario. 

Puse un breakpoint justo antes del test eax,eax, 
usé x/s 0x4c9a58 (la dirección que cargaba lea) y así leí el string completo:
"Confia en el tiempo, que suele dar dulces salidas a muchas amargas dificultades"

Como strings_not_equal devuelve 0 en eax cuando las dos cadenas coinciden, 
el test eax,eax no activa el salto a explode_bomb y la fase queda desactivada. 



phase_2

Lo primero fue descubrir que la fase lee dos enteros de la línea de comandos usando __strtol, 
así que puse breakpoints justo después de esas llamadas y comprobé en los registros que el 
primer número quedaba en rbx (y su copia en r12d) y el segundo en rbp (y su copia en r13d). 
A partir de ahí vi que el código multiplicaba ambos valores y explota si el producto es cero, 
entonces ninguno de los dos podía ser 0. Después comprobaba que su suma 
sea exactamente 47720, así que volví a inspeccionar rbx y rbp para asegurarme de ese requisito. 
Por último, antes de terminar, llama a la función misterio con esos dos valores 
(pasados en esi y edi) y hace un XOR entre ellos; si el resultado no tiene el bit de signo activado, 
la bomba explota, lo que me indicó que uno de los números debía ser negativo y el otro positivo. 
Con todo esto había que elegir un par que cumpliera: ninguno cero, suma = 47720 y XOR negativo (distintos signos), 
Yo elegí "-100 47820 " (notese que tiene un espacio al final por cómo se parsea el input, sino el segundo argumento
no es el esperado).



phase_3

Lo primero fue identificar el tipo de input que esperaba esta fase, que era una palabra y un número (%s %d). 
Después fue identificar que la lógica principal pasaba por una función llamada cuenta, 
que se llamaba desde la fase 3. Esa función realizaba una búsqueda binaria recursiva 
sobre un arreglo de palabras cargado desde un archivo. Dentro de cuenta, las comparaciones 
se hacían usando strcmp, y se almacenaba un contador de llamadas recursivas en la dirección apuntada 
por el registro r8. También que la palabra ingresada era pasada en el registro rsi, 
y que en cada llamada a cuenta se comparaba con una palabra del arreglo.

Puse un breakpoint en la instrucción donde se llama a strcmp, y en cada iteración 
imprimí el valor apuntado por r8 (para saber cuántas llamadas llevaba) 
y el contenido de rsi (para ver qué palabra se estaba probando). 
Así fui registrando en qué llamada encontraba cada palabra:
engringarse 1
conciliar 2
arrecadar 3
caber 4 
chapistear 5 
carear 6
cambiar 7
calacear 8
cachetonearse 9
cabriolar 10
cacear 11

Si la palabra se encontraba en 6 o menos llamadas, o en más de 11, la bomba explotaba. 
Por lo tanto, había que elegir una palabra que apareciera entre esas llamadas, es decir las últimas 5 de esta lista eran válidas.

Elegí "calacear", que aparecía en la llamada número 8, y ese fue el input que desactivó esta fase: "calacear 8 ".



phase_4

Primero identifiqué qué esperaba como parámetros la función, que eran 2 enteros (%d %d).
Después revisé qué hacía con esos argumentos que recibía, es decir, por ejemplo que tomaba el primero 
y lo reducía con un AND 0xf, o sea, que utilizaba un número entre 0 y 15. 
Viendo el registro eax (en 0x402161), me di cuenta de que ese valor se usaba como índice para recorrer un arreglo. 
Al inspeccionar el arreglo (en la dirección 0x4cde40), vi que era una lista de 16 enteros 
y que el 15 marcaba el final de la secuencia. 
La función arranca con el índice que se le pasa como primer argumento, 
va leyendo el valor en el arreglo, lo suma (guardado en ecx) y lo usa como nuevo índice, 
mientras incrementa un contador (en edx) para saber cuántos pasos dio. 
La idea era que la secuencia tuviera exactamente 12 elementos 
y la suma total coincidiera con el segundo número ingresado. 

arreglo
idx | valor         idx | valor         idx | valor         idx | valor  
----|------         ----|------         ----|------         ----|------
 0  | 7              4  | 13             8  | 0              12 | 2 
 1  | 4              5  | 10             9  | 12             13 | 11
 2  | 6              6  | 15             10 | 3              14 | 1  
 3  | 8              7  | 9              11 | 5              15 | 14

Entonces me paré en el valor 15 del arreglo cuyo índice es 6. De ahí me fijé a qué índice 
correspondía el valor 6, que era el 2. Y después lo mismo, al valor 2 le corresponde la posición 12...
Hice esto 12 veces (12 flechas) y me fijé qué índice me quedaba, que fue el 13. Así me quedó esta cadena:
13 → 11 → 5 → 10 → 3 → 8 → 0 → 7 → 9 → 12 → 2 → 6 → 15
                  
y después sumé los valores (ecx):
11 + 5 + 10 + 3 + 8 + 0 + 7 + 9 + 12 + 2 + 6 + 15 = 88

por lo que la entrada fue "13 88 "



secret_phase

Para llegar a la fase secreta lo primero fue entender cómo la invocaba el programa. Al revisar main 
vi que después de cada fase se llamaba a phase_defused, y que esta función llevaba un contador global 
num_input_strings que se incrementaba después de cada fase desactivada. Dentro de phase_defused hay 
un test que salta la fase secreta sólo cuando ese contador vale 4. En ese momento usa un sscanf 
con formato “%s %d %s” sobre el buffer donde se almacenan todas las entradas, y compara el tercer 
token con un string, es decir agregaría ese último string al input de la phase_3. 
Puse un breakpoint justo antes de ese compare en phase_defused, usé x/s <dirección> para 
leer el string cargado por el lea rsi,[…], y descubrí que la tercera palabra debía ser abrete_sesamo.

Con eso el código avanzaba hasta secret_phase, cuyo input se lee después del de la phase_4.

Esta fase comienza leyendo una línea y convirtiéndola en entero con __strtol (en ebx). 
A continuación resta 1 a eax y comprueba que quede ≤1000, o explota. Justo después carga en rdi 
el puntero al nodo raíz del árbol (n1 en 0x4f91f0) y mueve el entero leído a esi, antes de llamar a 
una función llamada fun7. Puse un breakpoint en ese call a fun7(root, value) para revisar 
registros: rdi apunta siempre al nodo actual y esi al valor que busco.

Al mirar la implementación de fun7 vi que hacía una búsqueda binaria recursiva: 
carga el campo value del nodo desde memoria, lo compara con esi y si es mayor va al hijo izquierdo 
(duplicando el código devuelto), si es menor va al hijo derecho (duplicando y sumando uno), 
si es igual retorna 0, y si llega a un puntero nulo retorna –1. 
El único caso en que el código final resulta 1 es cuando, desde la raíz, se compara primero 
con el hijo derecho y hay coincidencia.

Entonces cargué la dirección de la raíz en $root (y miré su hijo derecho leyendo [root+16] en memoria), 
lo que resultó ser el puntero al nodo con value 50. 
Es decir, el input 50 hace que fun7(n1,50) retorne 1, lo que lo hace valor para desactivar esta fase.